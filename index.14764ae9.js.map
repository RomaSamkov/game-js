{"mappings":"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","sources":["src/index.js"],"sourcesContent":["window.addEventListener('load', function () {\n  const canvas = this.document.getElementById('canvas1');\n  const ctx = canvas.getContext('2d');\n  canvas.width = 1280;\n  canvas.height = 720;\n\n  ctx.fillStyle = 'white';\n  ctx.lineWidth = 3;\n  ctx.strokeStyle = 'white';\n\n  class Player {\n    constructor(game) {\n      this.game = game;\n      this.collisionX = this.game.width * 0.5;\n      this.collisionY = this.game.height * 0.5;\n      this.collisionRadius = 30;\n      this.speedX = 0;\n      this.speedY = 0;\n      this.dx = 0;\n      this.dy = 0;\n      this.speedModifier = 20;\n      this.spriteWidth = 255;\n      this.spriteHeight = 255;\n      this.width = this.spriteWidth;\n      this.height = this.spriteHeight;\n      this.spriteX;\n      this.speedY;\n      this.image = document.getElementById('bull');\n    }\n    draw(context) {\n      context.drawImage(\n        this.image,\n        0,\n        0,\n        this.spriteWidth,\n        this.spriteHeight,\n        this.spriteX,\n        this.spriteY,\n        this.width,\n        this.height\n      );\n      context.beginPath();\n      context.arc(\n        this.collisionX,\n        this.collisionY,\n        this.collisionRadius,\n        0,\n        Math.PI * 2\n      );\n      context.save();\n      context.globalAlpha = 0.5;\n      context.fill();\n      context.restore();\n      context.stroke();\n      context.beginPath();\n      context.moveTo(this.collisionX, this.collisionY);\n      context.lineTo(this.game.mouse.x, this.game.mouse.y);\n      context.stroke();\n    }\n    update() {\n      this.dx = this.game.mouse.x - this.collisionX;\n      this.dy = this.game.mouse.y - this.collisionY;\n      const distance = Math.hypot(this.dy, this.dx);\n      if (distance > this.speedModifier) {\n        this.speedX = this.dx / distance || 0;\n        this.speedY = this.dy / distance || 0;\n      } else {\n        this.speedX = 0;\n        this.speedY = 0;\n      }\n      this.collisionX += this.speedX * this.speedModifier;\n      this.collisionY += this.speedY * this.speedModifier;\n      this.spriteX = this.collisionX - this.width * 0.5;\n      this.spriteY = this.collisionY - this.height * 0.5 - 100;\n      // collision with obstacles\n      this.game.obstacles.forEach(obstacle => {\n        // [distance < sumOfRadii, distance, sumOfRadii, dx, dy];\n        let [collision, distance, sumOfRadii, dx, dy] =\n          this.game.checkCollision(this, obstacle);\n        if (collision) {\n          const unit_x = dx / distance;\n          const unit_y = dy / distance;\n          this.collisionX = obstacle.collisionX + (sumOfRadii + 1) * unit_x;\n          this.collisionY = obstacle.collisionY + (sumOfRadii + 1) * unit_y;\n        }\n      });\n    }\n  }\n\n  class Obstacle {\n    constructor(game) {\n      this.game = game;\n      this.collisionX = Math.random() * this.game.width;\n      this.collisionY = Math.random() * this.game.height;\n      this.collisionRadius = 60;\n      this.image = document.getElementById('obstacles');\n      this.spriteWidth = 250;\n      this.spriteHeight = 250;\n      this.width = this.spriteWidth;\n      this.height = this.spriteHeight;\n      this.spriteX = this.collisionX - this.width * 0.5;\n      this.spriteY = this.collisionY - this.height * 0.5 - 70;\n      this.frameX = Math.floor(Math.random() * 4);\n      this.frameY = Math.floor(Math.random() * 3);\n    }\n    draw(context) {\n      context.drawImage(\n        this.image,\n        this.frameX * this.spriteWidth,\n        0 * this.spriteHeight,\n        this.spriteWidth,\n        this.spriteHeight,\n        this.spriteX,\n        this.spriteY,\n        this.width,\n        this.height\n      );\n      context.beginPath();\n      context.arc(\n        this.collisionX,\n        this.collisionY,\n        this.collisionRadius,\n        0,\n        Math.PI * 2\n      );\n      context.save();\n      context.globalAlpha = 0.5;\n      context.fill();\n      context.restore();\n      context.stroke();\n    }\n  }\n\n  class Game {\n    constructor(canvas) {\n      this.canvas = canvas;\n      this.width = this.canvas.width;\n      this.height = this.canvas.height;\n      this.topMargin = 260;\n      this.player = new Player(this);\n      this.numberOfObstacles = 8;\n      this.obstacles = [];\n      this.mouse = {\n        x: this.width * 0.5,\n        y: this.height * 0.5,\n        pressed: false,\n      };\n\n      canvas.addEventListener('mousedown', e => {\n        this.mouse.x = e.offsetX;\n        this.mouse.y = e.offsetY;\n        this.mouse.pressed = true;\n      });\n      canvas.addEventListener('mouseup', e => {\n        this.mouse.x = e.offsetX;\n        this.mouse.y = e.offsetY;\n        this.mouse.pressed = false;\n      });\n      canvas.addEventListener('mousemove', e => {\n        if (this.mouse.pressed) {\n          this.mouse.x = e.offsetX;\n          this.mouse.y = e.offsetY;\n        }\n      });\n    }\n    render(context) {\n      this.obstacles.forEach(obstacle => obstacle.draw(context));\n      this.player.draw(context);\n      this.player.update();\n    }\n    checkCollision(a, b) {\n      const dx = a.collisionX - b.collisionX;\n      const dy = a.collisionY - b.collisionY;\n      const distance = Math.hypot(dy, dx);\n      const sumOfRadii = a.collisionRadius + b.collisionRadius;\n      return [distance < sumOfRadii, distance, sumOfRadii, dx, dy];\n    }\n    init() {\n      let attempts = 0;\n      while (this.obstacles.length < this.numberOfObstacles && attempts < 500) {\n        let testObstacle = new Obstacle(this);\n        let overlap = false;\n        this.obstacles.forEach(obstacle => {\n          const dx = testObstacle.collisionX - obstacle.collisionX;\n          const dy = testObstacle.collisionY - obstacle.collisionY;\n          const distance = Math.hypot(dy, dx);\n          const distanceBuffer = 150;\n          const sumOfRadii =\n            testObstacle.collisionRadius +\n            obstacle.collisionRadius +\n            distanceBuffer;\n          if (distance < sumOfRadii) {\n            overlap = true;\n          }\n        });\n        const margin = testObstacle.collisionRadius * 2;\n        if (\n          !overlap &&\n          testObstacle.spriteX > 0 &&\n          testObstacle.spriteX < this.width - testObstacle.width &&\n          testObstacle.collisionY > this.topMargin + margin &&\n          testObstacle.collisionY < this.height - margin\n        ) {\n          this.obstacles.push(testObstacle);\n        }\n        attempts++;\n      }\n    }\n  }\n\n  const game = new Game(canvas);\n  game.init();\n  console.log(game);\n\n  function animate() {\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    game.render(ctx);\n    requestAnimationFrame(animate);\n  }\n  animate();\n});\n"],"names":["window","addEventListener","canvas","this","document","getElementById","ctx","getContext","width","height","fillStyle","lineWidth","strokeStyle","Player","draw","context","drawImage","image","spriteWidth","spriteHeight","spriteX","spriteY","beginPath","arc","collisionX","collisionY","collisionRadius","Math","PI","save","globalAlpha","fill","restore","stroke","moveTo","lineTo","game","mouse","x","y","update","dx","dy","distance","hypot","speedModifier","speedX","speedY","obstacles","forEach","obstacle","collision","sumOfRadii","checkCollision","unit_x","unit_y","constructor","Obstacle","frameX","random","floor","frameY","render","player","a","b","init","attempts","length","numberOfObstacles","testObstacle","overlap","margin","topMargin","push","pressed","e","offsetX","offsetY","console","log","animate","clearRect","requestAnimationFrame"],"version":3,"file":"index.14764ae9.js.map"}