{"mappings":"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","sources":["src/index.js"],"sourcesContent":["window.addEventListener('load', function () {\n  const canvas = this.document.getElementById('canvas1');\n  const ctx = canvas.getContext('2d');\n  canvas.width = 1280;\n  canvas.height = 720;\n\n  ctx.fillStyle = 'white';\n  ctx.lineWidth = 3;\n  ctx.strokeStyle = 'white';\n\n  class Player {\n    constructor(game) {\n      this.game = game;\n      this.collisionX = this.game.width * 0.5;\n      this.collisionY = this.game.height * 0.5;\n      this.collisionRadius = 30;\n      this.speedX = 0;\n      this.speedY = 0;\n      this.dx = 0;\n      this.dy = 0;\n      this.speedModifier = 5;\n      this.spriteWidth = 255;\n      this.spriteHeight = 255;\n      this.width = this.spriteWidth;\n      this.height = this.spriteHeight;\n      this.spriteX;\n      this.spriteY;\n      this.frameX = 0;\n      this.frameY = 0;\n      this.image = document.getElementById('bull');\n    }\n    draw(context) {\n      context.drawImage(\n        this.image,\n        this.frameX * this.spriteWidth,\n        this.frameY * this.spriteHeight,\n        this.spriteWidth,\n        this.spriteHeight,\n        this.spriteX,\n        this.spriteY,\n        this.width,\n        this.height\n      );\n      if (this.game.debug) {\n        context.beginPath();\n        context.arc(\n          this.collisionX,\n          this.collisionY,\n          this.collisionRadius,\n          0,\n          Math.PI * 2\n        );\n        context.save();\n        context.globalAlpha = 0.5;\n        context.fill();\n        context.restore();\n        context.stroke();\n        context.beginPath();\n        context.moveTo(this.collisionX, this.collisionY);\n        context.lineTo(this.game.mouse.x, this.game.mouse.y);\n        context.stroke();\n      }\n    }\n    update() {\n      // sprite animation\n      this.dx = this.game.mouse.x - this.collisionX;\n      this.dy = this.game.mouse.y - this.collisionY;\n      const angle = Math.atan2(this.dy, this.dx);\n      if (angle < -2.74 || angle > 2.74) this.frameY = 6;\n      else if (angle < -1.96) this.frameY = 7;\n      else if (angle < -1.17) this.frameY = 0;\n      else if (angle < -0.39) this.frameY = 1;\n      else if (angle < 0.39) this.frameY = 2;\n      else if (angle < 1.17) this.frameY = 3;\n      else if (angle < 1.96) this.frameY = 4;\n      else if (angle < 2.74) this.frameY = 5;\n\n      const distance = Math.hypot(this.dy, this.dx);\n      if (distance > this.speedModifier) {\n        this.speedX = this.dx / distance || 0;\n        this.speedY = this.dy / distance || 0;\n      } else {\n        this.speedX = 0;\n        this.speedY = 0;\n      }\n      this.collisionX += this.speedX * this.speedModifier;\n      this.collisionY += this.speedY * this.speedModifier;\n      this.spriteX = this.collisionX - this.width * 0.5;\n      this.spriteY = this.collisionY - this.height * 0.5 - 100;\n      // collision with obstacles\n      this.game.obstacles.forEach(obstacle => {\n        // [distance < sumOfRadii, distance, sumOfRadii, dx, dy];\n        let [collision, distance, sumOfRadii, dx, dy] =\n          this.game.checkCollision(this, obstacle);\n        if (collision) {\n          const unit_x = dx / distance;\n          const unit_y = dy / distance;\n          this.collisionX = obstacle.collisionX + (sumOfRadii + 1) * unit_x;\n          this.collisionY = obstacle.collisionY + (sumOfRadii + 1) * unit_y;\n        }\n      });\n    }\n  }\n\n  class Obstacle {\n    constructor(game) {\n      this.game = game;\n      this.collisionX = Math.random() * this.game.width;\n      this.collisionY = Math.random() * this.game.height;\n      this.collisionRadius = 40;\n      this.image = document.getElementById('obstacles');\n      this.spriteWidth = 250;\n      this.spriteHeight = 250;\n      this.width = this.spriteWidth;\n      this.height = this.spriteHeight;\n      this.spriteX = this.collisionX - this.width * 0.5;\n      this.spriteY = this.collisionY - this.height * 0.5 - 70;\n      this.frameX = Math.floor(Math.random() * 4);\n      this.frameY = Math.floor(Math.random() * 3);\n    }\n    draw(context) {\n      context.drawImage(\n        this.image,\n        this.frameX * this.spriteWidth,\n        this.frameY * this.spriteHeight,\n        this.spriteWidth,\n        this.spriteHeight,\n        this.spriteX,\n        this.spriteY,\n        this.width,\n        this.height\n      );\n      if (this.game.debug) {\n        context.beginPath();\n        context.arc(\n          this.collisionX,\n          this.collisionY,\n          this.collisionRadius,\n          0,\n          Math.PI * 2\n        );\n        context.save();\n        context.globalAlpha = 0.5;\n        context.fill();\n        context.restore();\n        context.stroke();\n      }\n    }\n  }\n\n  class Game {\n    constructor(canvas) {\n      this.canvas = canvas;\n      this.width = this.canvas.width;\n      this.height = this.canvas.height;\n      this.topMargin = 260;\n      this.debug = true;\n      this.player = new Player(this);\n      this.numberOfObstacles = 8;\n      this.obstacles = [];\n      this.mouse = {\n        x: this.width * 0.5,\n        y: this.height * 0.5,\n        pressed: false,\n      };\n\n      canvas.addEventListener('mousedown', e => {\n        this.mouse.x = e.offsetX;\n        this.mouse.y = e.offsetY;\n        this.mouse.pressed = true;\n      });\n      canvas.addEventListener('mouseup', e => {\n        this.mouse.x = e.offsetX;\n        this.mouse.y = e.offsetY;\n        this.mouse.pressed = false;\n      });\n      canvas.addEventListener('mousemove', e => {\n        if (this.mouse.pressed) {\n          this.mouse.x = e.offsetX;\n          this.mouse.y = e.offsetY;\n        }\n      });\n      window.addEventListener('keydown', e => {\n        if (e.key == 'd') this.debug = !this.debug;\n        console.log(this.debug);\n      });\n    }\n    render(context) {\n      this.obstacles.forEach(obstacle => obstacle.draw(context));\n      this.player.draw(context);\n      this.player.update();\n    }\n    checkCollision(a, b) {\n      const dx = a.collisionX - b.collisionX;\n      const dy = a.collisionY - b.collisionY;\n      const distance = Math.hypot(dy, dx);\n      const sumOfRadii = a.collisionRadius + b.collisionRadius;\n      return [distance < sumOfRadii, distance, sumOfRadii, dx, dy];\n    }\n    init() {\n      let attempts = 0;\n      while (this.obstacles.length < this.numberOfObstacles && attempts < 500) {\n        let testObstacle = new Obstacle(this);\n        let overlap = false;\n        this.obstacles.forEach(obstacle => {\n          const dx = testObstacle.collisionX - obstacle.collisionX;\n          const dy = testObstacle.collisionY - obstacle.collisionY;\n          const distance = Math.hypot(dy, dx);\n          const distanceBuffer = 150;\n          const sumOfRadii =\n            testObstacle.collisionRadius +\n            obstacle.collisionRadius +\n            distanceBuffer;\n          if (distance < sumOfRadii) {\n            overlap = true;\n          }\n        });\n        const margin = testObstacle.collisionRadius * 2;\n        if (\n          !overlap &&\n          testObstacle.spriteX > 0 &&\n          testObstacle.spriteX < this.width - testObstacle.width &&\n          testObstacle.collisionY > this.topMargin + margin &&\n          testObstacle.collisionY < this.height - margin\n        ) {\n          this.obstacles.push(testObstacle);\n        }\n        attempts++;\n      }\n    }\n  }\n\n  const game = new Game(canvas);\n  game.init();\n  console.log(game);\n\n  function animate() {\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    game.render(ctx);\n    requestAnimationFrame(animate);\n  }\n  animate();\n});\n"],"names":["window","addEventListener","canvas","this","document","getElementById","ctx","getContext","width","height","fillStyle","lineWidth","strokeStyle","Player","draw","context","drawImage","image","frameX","spriteWidth","frameY","spriteHeight","spriteX","spriteY","game","debug","beginPath","arc","collisionX","collisionY","collisionRadius","Math","PI","save","globalAlpha","fill","restore","stroke","moveTo","lineTo","mouse","x","y","update","dx","dy","angle","atan2","distance","hypot","speedModifier","speedX","speedY","obstacles","forEach","obstacle","collision","sumOfRadii","checkCollision","unit_x","unit_y","constructor","Obstacle","random","floor","render","player","a","b","init","attempts","length","numberOfObstacles","testObstacle","overlap","margin","topMargin","push","pressed","e","offsetX","offsetY","key","console","log","animate","clearRect","requestAnimationFrame"],"version":3,"file":"index.5195b759.js.map"}