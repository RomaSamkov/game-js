{"mappings":"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","sources":["src/index.js"],"sourcesContent":["window.addEventListener('load', function () {\n  const canvas = this.document.getElementById('canvas1');\n  const ctx = canvas.getContext('2d');\n  canvas.width = 1280;\n  canvas.height = 720;\n\n  ctx.fillStyle = 'white';\n  ctx.lineWidth = 3;\n  ctx.strokeStyle = 'white';\n\n  class Player {\n    constructor(game) {\n      this.game = game;\n      this.collisionX = this.game.width * 0.5;\n      this.collisionY = this.game.height * 0.5;\n      this.collisionRadius = 30;\n      this.speedX = 0;\n      this.speedY = 0;\n      this.dx = 0;\n      this.dy = 0;\n      this.speedModifier = 5;\n      this.spriteWidth = 255;\n      this.spriteHeight = 256;\n      this.width = this.spriteWidth;\n      this.height = this.spriteHeight;\n      this.spriteX;\n      this.spriteY;\n      this.frameX = 0;\n      this.frameY = 0;\n      this.image = document.getElementById('bull');\n    }\n    draw(context) {\n      context.drawImage(\n        this.image,\n        this.frameX * this.spriteWidth,\n        this.frameY * this.spriteHeight,\n        this.spriteWidth,\n        this.spriteHeight,\n        this.spriteX,\n        this.spriteY,\n        this.width,\n        this.height\n      );\n      if (this.game.debug) {\n        context.beginPath();\n        context.arc(\n          this.collisionX,\n          this.collisionY,\n          this.collisionRadius,\n          0,\n          Math.PI * 2\n        );\n        context.save();\n        context.globalAlpha = 0.5;\n        context.fill();\n        context.restore();\n        context.stroke();\n        context.beginPath();\n        context.moveTo(this.collisionX, this.collisionY);\n        context.lineTo(this.game.mouse.x, this.game.mouse.y);\n        context.stroke();\n      }\n    }\n    update() {\n      // sprite animation\n      this.dx = this.game.mouse.x - this.collisionX;\n      this.dy = this.game.mouse.y - this.collisionY;\n      const angle = Math.atan2(this.dy, this.dx);\n      if (angle < -2.74 || angle > 2.74) this.frameY = 6;\n      else if (angle < -1.96) this.frameY = 7;\n      else if (angle < -1.17) this.frameY = 0;\n      else if (angle < -0.39) this.frameY = 1;\n      else if (angle < 0.39) this.frameY = 2;\n      else if (angle < 1.17) this.frameY = 3;\n      else if (angle < 1.96) this.frameY = 4;\n      else if (angle < 2.74) this.frameY = 5;\n\n      const distance = Math.hypot(this.dy, this.dx);\n      if (distance > this.speedModifier) {\n        this.speedX = this.dx / distance || 0;\n        this.speedY = this.dy / distance || 0;\n      } else {\n        this.speedX = 0;\n        this.speedY = 0;\n      }\n      this.collisionX += this.speedX * this.speedModifier;\n      this.collisionY += this.speedY * this.speedModifier;\n      this.spriteX = this.collisionX - this.width * 0.5;\n      this.spriteY = this.collisionY - this.height * 0.5 - 100;\n      // horizontal boundaries\n      if (this.collisionX < this.collisionRadius)\n        this.collisionX = this.collisionRadius;\n      else if (this.collisionX > this.game.width - this.collisionRadius)\n        this.collisionX = this.game.width - this.collisionRadius;\n      // vertical boundaries\n      if (this.collisionY < this.game.topMargin + this.collisionRadius)\n        this.collisionY = this.game.topMargin + this.collisionRadius;\n      else if (this.collisionY > this.game.height - this.collisionRadius)\n        this.collisionY = this.game.height - this.collisionRadius;\n      // collision with obstacles\n      this.game.obstacles.forEach(obstacle => {\n        // [distance < sumOfRadii, distance, sumOfRadii, dx, dy];\n        let [collision, distance, sumOfRadii, dx, dy] =\n          this.game.checkCollision(this, obstacle);\n        if (collision) {\n          const unit_x = dx / distance;\n          const unit_y = dy / distance;\n          this.collisionX = obstacle.collisionX + (sumOfRadii + 1) * unit_x;\n          this.collisionY = obstacle.collisionY + (sumOfRadii + 1) * unit_y;\n        }\n      });\n    }\n  }\n\n  class Obstacle {\n    constructor(game) {\n      this.game = game;\n      this.collisionX = Math.random() * this.game.width;\n      this.collisionY = Math.random() * this.game.height;\n      this.collisionRadius = 40;\n      this.image = document.getElementById('obstacles');\n      this.spriteWidth = 250;\n      this.spriteHeight = 250;\n      this.width = this.spriteWidth;\n      this.height = this.spriteHeight;\n      this.spriteX = this.collisionX - this.width * 0.5;\n      this.spriteY = this.collisionY - this.height * 0.5 - 70;\n      this.frameX = Math.floor(Math.random() * 4);\n      this.frameY = Math.floor(Math.random() * 3);\n    }\n    draw(context) {\n      context.drawImage(\n        this.image,\n        this.frameX * this.spriteWidth,\n        this.frameY * this.spriteHeight,\n        this.spriteWidth,\n        this.spriteHeight,\n        this.spriteX,\n        this.spriteY,\n        this.width,\n        this.height\n      );\n      if (this.game.debug) {\n        context.beginPath();\n        context.arc(\n          this.collisionX,\n          this.collisionY,\n          this.collisionRadius,\n          0,\n          Math.PI * 2\n        );\n        context.save();\n        context.globalAlpha = 0.5;\n        context.fill();\n        context.restore();\n        context.stroke();\n      }\n    }\n    update() {}\n  }\n\n  class Egg {\n    constructor(game) {\n      this.game = game;\n      this.collisionRadius = 40;\n      this.margin = this.collisionRadius * 2;\n      this.collisionX =\n        this.margin + Math.random() * (this.game.width - this.margin * 2);\n      this.collisionY =\n        this.game.topMargin +\n        Math.random() * (this.game.height - this.game.topMargin - this.margin);\n      this.collisionRadius = 40;\n      this.image = document.getElementById('egg');\n      this.spriteWidth = 110;\n      this.spriteHeight = 135;\n      this.width = this.spriteWidth;\n      this.height = this.spriteHeight;\n      this.spriteX;\n      this.spriteY;\n    }\n    draw(context) {\n      context.drawImage(this.image, this.spriteX, this.spriteY);\n      if (this.game.debug) {\n        context.beginPath();\n        context.arc(\n          this.collisionX,\n          this.collisionY,\n          this.collisionRadius,\n          0,\n          Math.PI * 2\n        );\n        context.save();\n        context.globalAlpha = 0.5;\n        context.fill();\n        context.restore();\n        context.stroke();\n      }\n    }\n    update() {\n      this.spriteX = this.collisionX - this.width * 0.5;\n      this.spriteY = this.collisionY - this.height * 0.5 - 30;\n      let collisionObjects = [this.game.player, ...this.game.obstacles];\n      collisionObjects.forEach(object => {\n        let [collision, distance, sumOfRadii, dx, dy] =\n          this.game.checkCollision(this, object);\n        if (collision) {\n          const unit_x = dx / distance;\n          const unit_y = dy / distance;\n          this.collisionX = object.collisionX + (sumOfRadii + 1) * unit_x;\n          this.collisionY = object.collisionY + (sumOfRadii + 1) * unit_y;\n        }\n      });\n    }\n  }\n\n  class Enemy {\n    constructor(game) {\n      this.game = game;\n      this.collisionRadius = 30;\n      this.speedX = Math.random() * 3 + 0.5;\n      this.image = document.getElementById('toad');\n      this.spriteWidth = 140;\n      this.spriteHeight = 260;\n      this.width = this.spriteWidth;\n      this.height = this.spriteHeight;\n      this.collisionX =\n        this.game.width + this.width + Math.random() * this.game.width * 0.5;\n      this.collisionY =\n        this.game.topMargin +\n        Math.random() * (this.game.height - this.game.topMargin);\n      this.spriteX;\n      this.spriteY;\n    }\n    draw(context) {\n      context.drawImage(this.image, this.spriteX, this.spriteY);\n      if (this.game.debug) {\n        context.beginPath();\n        context.arc(\n          this.collisionX,\n          this.collisionY,\n          this.collisionRadius,\n          0,\n          Math.PI * 2\n        );\n        context.save();\n        context.globalAlpha = 0.5;\n        context.fill();\n        context.restore();\n        context.stroke();\n      }\n    }\n    update() {\n      this.spriteX = this.collisionX - this.width * 0.5;\n      this.spriteY = this.collisionY - this.height + 40;\n      this.collisionX -= this.speedX;\n      if (this.spriteX + this.width < 0) {\n        this.collisionX =\n          this.game.width + this.width + Math.random() * this.game.width * 0.5;\n        this.collisionY =\n          this.game.topMargin +\n          Math.random() * (this.game.height - this.game.topMargin);\n      }\n    }\n  }\n\n  class Game {\n    constructor(canvas) {\n      this.canvas = canvas;\n      this.width = this.canvas.width;\n      this.height = this.canvas.height;\n      this.topMargin = 260;\n      this.debug = true;\n      this.player = new Player(this);\n      this.fps = 70;\n      this.timer = 0;\n      this.interval = 1000 / this.fps;\n      this.eggTimer = 0;\n      this.eggInterval = 1000;\n      this.numberOfObstacles = 8;\n      this.maxEggs = 10;\n      this.obstacles = [];\n      this.eggs = [];\n      this.enemies = [];\n      this.gameObjects = [];\n      this.mouse = {\n        x: this.width * 0.5,\n        y: this.height * 0.5,\n        pressed: false,\n      };\n\n      canvas.addEventListener('mousedown', e => {\n        this.mouse.x = e.offsetX;\n        this.mouse.y = e.offsetY;\n        this.mouse.pressed = true;\n      });\n      canvas.addEventListener('mouseup', e => {\n        this.mouse.x = e.offsetX;\n        this.mouse.y = e.offsetY;\n        this.mouse.pressed = false;\n      });\n      canvas.addEventListener('mousemove', e => {\n        if (this.mouse.pressed) {\n          this.mouse.x = e.offsetX;\n          this.mouse.y = e.offsetY;\n        }\n      });\n      window.addEventListener('keydown', e => {\n        if (e.key == 'd') this.debug = !this.debug;\n      });\n    }\n\n    render(context, deltaTime) {\n      if (this.timer > this.interval) {\n        context.clearRect(0, 0, this.width, this.height);\n        this.gameObjects = [\n          this.player,\n          ...this.eggs,\n          ...this.obstacles,\n          ...this.enemies,\n        ];\n        this.gameObjects.sort((a, b) => {\n          return a.collisionY - b.collisionY;\n        });\n        this.gameObjects.forEach(object => {\n          object.draw(context);\n          object.update();\n        });\n        this.timer = 0;\n      }\n      this.timer += deltaTime;\n      if (this.eggTimer > this.eggInterval && this.eggs.length < this.maxEggs) {\n        this.addEgg();\n        this.eggTimer = 0;\n      } else {\n        this.eggTimer += deltaTime;\n      }\n    }\n\n    checkCollision(a, b) {\n      const dx = a.collisionX - b.collisionX;\n      const dy = a.collisionY - b.collisionY;\n      const distance = Math.hypot(dy, dx);\n      const sumOfRadii = a.collisionRadius + b.collisionRadius;\n      return [distance < sumOfRadii, distance, sumOfRadii, dx, dy];\n    }\n\n    addEgg() {\n      this.eggs.push(new Egg(this));\n    }\n\n    addEnemy() {\n      this.enemies.push(new Enemy(this));\n    }\n\n    init() {\n      for (let i = 0; i < 3; i++) {\n        this.addEnemy();\n      }\n      let attempts = 0;\n      while (this.obstacles.length < this.numberOfObstacles && attempts < 500) {\n        let testObstacle = new Obstacle(this);\n        let overlap = false;\n        this.obstacles.forEach(obstacle => {\n          const dx = testObstacle.collisionX - obstacle.collisionX;\n          const dy = testObstacle.collisionY - obstacle.collisionY;\n          const distance = Math.hypot(dy, dx);\n          const distanceBuffer = 150;\n          const sumOfRadii =\n            testObstacle.collisionRadius +\n            obstacle.collisionRadius +\n            distanceBuffer;\n          if (distance < sumOfRadii) {\n            overlap = true;\n          }\n        });\n        const margin = testObstacle.collisionRadius * 3;\n        if (\n          !overlap &&\n          testObstacle.spriteX > 0 &&\n          testObstacle.spriteX < this.width - testObstacle.width &&\n          testObstacle.collisionY > this.topMargin + margin &&\n          testObstacle.collisionY < this.height - margin\n        ) {\n          this.obstacles.push(testObstacle);\n        }\n        attempts++;\n      }\n    }\n  }\n\n  const game = new Game(canvas);\n  game.init();\n  console.log(game);\n\n  let lastTime = 0;\n  function animate(timeStamp) {\n    const deltaTime = timeStamp - lastTime;\n    lastTime = timeStamp;\n    game.render(ctx, deltaTime);\n    requestAnimationFrame(animate);\n  }\n  animate(0);\n});\n"],"names":["window","addEventListener","canvas","this","document","getElementById","ctx","getContext","width","height","fillStyle","lineWidth","strokeStyle","Player","draw","context","drawImage","image","frameX","spriteWidth","frameY","spriteHeight","spriteX","spriteY","game","debug","beginPath","arc","collisionX","collisionY","collisionRadius","Math","PI","save","globalAlpha","fill","restore","stroke","moveTo","lineTo","mouse","x","y","update","dx","dy","angle","atan2","distance","hypot","speedModifier","speedX","speedY","topMargin","obstacles","forEach","obstacle","collision","sumOfRadii","checkCollision","unit_x","unit_y","constructor","Obstacle","random","floor","Egg","player","object","margin","Enemy","render","deltaTime","timer","interval","clearRect","gameObjects","eggs","enemies","sort","a","b","eggTimer","eggInterval","length","maxEggs","addEgg","push","addEnemy","init","i","attempts","numberOfObstacles","testObstacle","overlap","fps","pressed","e","offsetX","offsetY","key","console","log","lastTime","animate","timeStamp","requestAnimationFrame"],"version":3,"file":"index.79b05da2.js.map"}