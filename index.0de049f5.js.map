{"mappings":"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","sources":["src/index.js"],"sourcesContent":["window.addEventListener('load', function () {\n  const canvas = this.document.getElementById('canvas1');\n  const ctx = canvas.getContext('2d');\n  canvas.width = 1280;\n  canvas.height = 720;\n\n  ctx.fillStyle = 'white';\n  ctx.lineWidth = 3;\n  ctx.strokeStyle = 'white';\n\n  class Player {\n    constructor(game) {\n      this.game = game;\n      this.collisionX = this.game.width * 0.5;\n      this.collisionY = this.game.height * 0.5;\n      this.collisionRadius = 30;\n      this.speedX = 0;\n      this.speedY = 0;\n      this.dx = 0;\n      this.dy = 0;\n      this.speedModifier = 5;\n      this.spriteWidth = 255;\n      this.spriteHeight = 255;\n      this.width = this.spriteWidth;\n      this.height = this.spriteHeight;\n      this.spriteX;\n      this.spriteY;\n      this.frameX = 0;\n      this.frameY = 0;\n      this.image = document.getElementById('bull');\n    }\n    draw(context) {\n      context.drawImage(\n        this.image,\n        this.frameX * this.spriteWidth,\n        this.frameY * this.spriteHeight,\n        this.spriteWidth,\n        this.spriteHeight,\n        this.spriteX,\n        this.spriteY,\n        this.width,\n        this.height\n      );\n      context.beginPath();\n      context.arc(\n        this.collisionX,\n        this.collisionY,\n        this.collisionRadius,\n        0,\n        Math.PI * 2\n      );\n      context.save();\n      context.globalAlpha = 0.5;\n      context.fill();\n      context.restore();\n      context.stroke();\n      context.beginPath();\n      context.moveTo(this.collisionX, this.collisionY);\n      context.lineTo(this.game.mouse.x, this.game.mouse.y);\n      context.stroke();\n    }\n    update() {\n      // sprite animation\n      this.dx = this.game.mouse.x - this.collisionX;\n      this.dy = this.game.mouse.y - this.collisionY;\n      const angle = Math.atan2(this.dy, this.dx);\n      if (angle < -2.74 || angle > 2.74) this.frameY = 6;\n      else if (angle < -1.96) this.frameY = 7;\n      else if (angle < -1.17) this.frameY = 0;\n      else if (angle < -0.39) this.frameY = 1;\n      else if (angle < 0.39) this.frameY = 2;\n      else if (angle < 1.17) this.frameY = 3;\n      else if (angle < 1.96) this.frameY = 4;\n      else if (angle < 2.74) this.frameY = 5;\n\n      const distance = Math.hypot(this.dy, this.dx);\n      if (distance > this.speedModifier) {\n        this.speedX = this.dx / distance || 0;\n        this.speedY = this.dy / distance || 0;\n      } else {\n        this.speedX = 0;\n        this.speedY = 0;\n      }\n      this.collisionX += this.speedX * this.speedModifier;\n      this.collisionY += this.speedY * this.speedModifier;\n      this.spriteX = this.collisionX - this.width * 0.5;\n      this.spriteY = this.collisionY - this.height * 0.5 - 100;\n      // collision with obstacles\n      this.game.obstacles.forEach(obstacle => {\n        // [distance < sumOfRadii, distance, sumOfRadii, dx, dy];\n        let [collision, distance, sumOfRadii, dx, dy] =\n          this.game.checkCollision(this, obstacle);\n        if (collision) {\n          const unit_x = dx / distance;\n          const unit_y = dy / distance;\n          this.collisionX = obstacle.collisionX + (sumOfRadii + 1) * unit_x;\n          this.collisionY = obstacle.collisionY + (sumOfRadii + 1) * unit_y;\n        }\n      });\n    }\n  }\n\n  class Obstacle {\n    constructor(game) {\n      this.game = game;\n      this.collisionX = Math.random() * this.game.width;\n      this.collisionY = Math.random() * this.game.height;\n      this.collisionRadius = 60;\n      this.image = document.getElementById('obstacles');\n      this.spriteWidth = 250;\n      this.spriteHeight = 250;\n      this.width = this.spriteWidth;\n      this.height = this.spriteHeight;\n      this.spriteX = this.collisionX - this.width * 0.5;\n      this.spriteY = this.collisionY - this.height * 0.5 - 70;\n      this.frameX = Math.floor(Math.random() * 4);\n      this.frameY = Math.floor(Math.random() * 3);\n    }\n    draw(context) {\n      context.drawImage(\n        this.image,\n        this.frameX * this.spriteWidth,\n        0 * this.spriteHeight,\n        this.spriteWidth,\n        this.spriteHeight,\n        this.spriteX,\n        this.spriteY,\n        this.width,\n        this.height\n      );\n      context.beginPath();\n      context.arc(\n        this.collisionX,\n        this.collisionY,\n        this.collisionRadius,\n        0,\n        Math.PI * 2\n      );\n      context.save();\n      context.globalAlpha = 0.5;\n      context.fill();\n      context.restore();\n      context.stroke();\n    }\n  }\n\n  class Game {\n    constructor(canvas) {\n      this.canvas = canvas;\n      this.width = this.canvas.width;\n      this.height = this.canvas.height;\n      this.topMargin = 260;\n      this.player = new Player(this);\n      this.numberOfObstacles = 8;\n      this.obstacles = [];\n      this.mouse = {\n        x: this.width * 0.5,\n        y: this.height * 0.5,\n        pressed: false,\n      };\n\n      canvas.addEventListener('mousedown', e => {\n        this.mouse.x = e.offsetX;\n        this.mouse.y = e.offsetY;\n        this.mouse.pressed = true;\n      });\n      canvas.addEventListener('mouseup', e => {\n        this.mouse.x = e.offsetX;\n        this.mouse.y = e.offsetY;\n        this.mouse.pressed = false;\n      });\n      canvas.addEventListener('mousemove', e => {\n        if (this.mouse.pressed) {\n          this.mouse.x = e.offsetX;\n          this.mouse.y = e.offsetY;\n        }\n      });\n    }\n    render(context) {\n      this.obstacles.forEach(obstacle => obstacle.draw(context));\n      this.player.draw(context);\n      this.player.update();\n    }\n    checkCollision(a, b) {\n      const dx = a.collisionX - b.collisionX;\n      const dy = a.collisionY - b.collisionY;\n      const distance = Math.hypot(dy, dx);\n      const sumOfRadii = a.collisionRadius + b.collisionRadius;\n      return [distance < sumOfRadii, distance, sumOfRadii, dx, dy];\n    }\n    init() {\n      let attempts = 0;\n      while (this.obstacles.length < this.numberOfObstacles && attempts < 500) {\n        let testObstacle = new Obstacle(this);\n        let overlap = false;\n        this.obstacles.forEach(obstacle => {\n          const dx = testObstacle.collisionX - obstacle.collisionX;\n          const dy = testObstacle.collisionY - obstacle.collisionY;\n          const distance = Math.hypot(dy, dx);\n          const distanceBuffer = 150;\n          const sumOfRadii =\n            testObstacle.collisionRadius +\n            obstacle.collisionRadius +\n            distanceBuffer;\n          if (distance < sumOfRadii) {\n            overlap = true;\n          }\n        });\n        const margin = testObstacle.collisionRadius * 2;\n        if (\n          !overlap &&\n          testObstacle.spriteX > 0 &&\n          testObstacle.spriteX < this.width - testObstacle.width &&\n          testObstacle.collisionY > this.topMargin + margin &&\n          testObstacle.collisionY < this.height - margin\n        ) {\n          this.obstacles.push(testObstacle);\n        }\n        attempts++;\n      }\n    }\n  }\n\n  const game = new Game(canvas);\n  game.init();\n  console.log(game);\n\n  function animate() {\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    game.render(ctx);\n    requestAnimationFrame(animate);\n  }\n  animate();\n});\n"],"names":["window","addEventListener","canvas","this","document","getElementById","ctx","getContext","width","height","fillStyle","lineWidth","strokeStyle","Player","draw","context","drawImage","image","frameX","spriteWidth","frameY","spriteHeight","spriteX","spriteY","beginPath","arc","collisionX","collisionY","collisionRadius","Math","PI","save","globalAlpha","fill","restore","stroke","moveTo","lineTo","game","mouse","x","y","update","dx","dy","angle","atan2","distance","hypot","speedModifier","speedX","speedY","obstacles","forEach","obstacle","collision","sumOfRadii","checkCollision","unit_x","unit_y","constructor","Obstacle","random","floor","render","player","a","b","init","attempts","length","numberOfObstacles","testObstacle","overlap","margin","topMargin","push","pressed","e","offsetX","offsetY","console","log","animate","clearRect","requestAnimationFrame"],"version":3,"file":"index.0de049f5.js.map"}