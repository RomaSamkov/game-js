{"mappings":"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","sources":["src/index.js"],"sourcesContent":["window.addEventListener('load', function () {\n  const canvas = this.document.getElementById('canvas1');\n  const ctx = canvas.getContext('2d');\n  canvas.width = 1280;\n  canvas.height = 720;\n\n  ctx.fillStyle = 'white';\n  ctx.lineWidth = 3;\n  ctx.strokeStyle = 'black';\n  ctx.font = '40px Bangers';\n  ctx.textAlign = 'center';\n\n  class Player {\n    constructor(game) {\n      this.game = game;\n      this.collisionX = this.game.width * 0.5;\n      this.collisionY = this.game.height * 0.5;\n      this.collisionRadius = 30;\n      this.speedX = 0;\n      this.speedY = 0;\n      this.dx = 0;\n      this.dy = 0;\n      this.speedModifier = 5;\n      this.spriteWidth = 255;\n      this.spriteHeight = 256;\n      this.width = this.spriteWidth;\n      this.height = this.spriteHeight;\n      this.spriteX;\n      this.spriteY;\n      this.frameX = 0;\n      this.frameY = 0;\n      this.image = document.getElementById('bull');\n    }\n    draw(context) {\n      context.drawImage(\n        this.image,\n        this.frameX * this.spriteWidth,\n        this.frameY * this.spriteHeight,\n        this.spriteWidth,\n        this.spriteHeight,\n        this.spriteX,\n        this.spriteY,\n        this.width,\n        this.height\n      );\n      if (this.game.debug) {\n        context.beginPath();\n        context.arc(\n          this.collisionX,\n          this.collisionY,\n          this.collisionRadius,\n          0,\n          Math.PI * 2\n        );\n        context.save();\n        context.globalAlpha = 0.5;\n        context.fill();\n        context.restore();\n        context.stroke();\n        context.beginPath();\n        context.moveTo(this.collisionX, this.collisionY);\n        context.lineTo(this.game.mouse.x, this.game.mouse.y);\n        context.stroke();\n      }\n    }\n    update() {\n      // sprite animation\n      this.dx = this.game.mouse.x - this.collisionX;\n      this.dy = this.game.mouse.y - this.collisionY;\n      const angle = Math.atan2(this.dy, this.dx);\n      if (angle < -2.74 || angle > 2.74) this.frameY = 6;\n      else if (angle < -1.96) this.frameY = 7;\n      else if (angle < -1.17) this.frameY = 0;\n      else if (angle < -0.39) this.frameY = 1;\n      else if (angle < 0.39) this.frameY = 2;\n      else if (angle < 1.17) this.frameY = 3;\n      else if (angle < 1.96) this.frameY = 4;\n      else if (angle < 2.74) this.frameY = 5;\n\n      const distance = Math.hypot(this.dy, this.dx);\n      if (distance > this.speedModifier) {\n        this.speedX = this.dx / distance || 0;\n        this.speedY = this.dy / distance || 0;\n      } else {\n        this.speedX = 0;\n        this.speedY = 0;\n      }\n      this.collisionX += this.speedX * this.speedModifier;\n      this.collisionY += this.speedY * this.speedModifier;\n      this.spriteX = this.collisionX - this.width * 0.5;\n      this.spriteY = this.collisionY - this.height * 0.5 - 100;\n      // horizontal boundaries\n      if (this.collisionX < this.collisionRadius)\n        this.collisionX = this.collisionRadius;\n      else if (this.collisionX > this.game.width - this.collisionRadius)\n        this.collisionX = this.game.width - this.collisionRadius;\n      // vertical boundaries\n      if (this.collisionY < this.game.topMargin + this.collisionRadius)\n        this.collisionY = this.game.topMargin + this.collisionRadius;\n      else if (this.collisionY > this.game.height - this.collisionRadius)\n        this.collisionY = this.game.height - this.collisionRadius;\n      // collision with obstacles\n      this.game.obstacles.forEach(obstacle => {\n        // [distance < sumOfRadii, distance, sumOfRadii, dx, dy];\n        let [collision, distance, sumOfRadii, dx, dy] =\n          this.game.checkCollision(this, obstacle);\n        if (collision) {\n          const unit_x = dx / distance;\n          const unit_y = dy / distance;\n          this.collisionX = obstacle.collisionX + (sumOfRadii + 1) * unit_x;\n          this.collisionY = obstacle.collisionY + (sumOfRadii + 1) * unit_y;\n        }\n      });\n    }\n  }\n\n  class Obstacle {\n    constructor(game) {\n      this.game = game;\n      this.collisionX = Math.random() * this.game.width;\n      this.collisionY = Math.random() * this.game.height;\n      this.collisionRadius = 40;\n      this.image = document.getElementById('obstacles');\n      this.spriteWidth = 250;\n      this.spriteHeight = 250;\n      this.width = this.spriteWidth;\n      this.height = this.spriteHeight;\n      this.spriteX = this.collisionX - this.width * 0.5;\n      this.spriteY = this.collisionY - this.height * 0.5 - 70;\n      this.frameX = Math.floor(Math.random() * 4);\n      this.frameY = Math.floor(Math.random() * 3);\n    }\n    draw(context) {\n      context.drawImage(\n        this.image,\n        this.frameX * this.spriteWidth,\n        this.frameY * this.spriteHeight,\n        this.spriteWidth,\n        this.spriteHeight,\n        this.spriteX,\n        this.spriteY,\n        this.width,\n        this.height\n      );\n      if (this.game.debug) {\n        context.beginPath();\n        context.arc(\n          this.collisionX,\n          this.collisionY,\n          this.collisionRadius,\n          0,\n          Math.PI * 2\n        );\n        context.save();\n        context.globalAlpha = 0.5;\n        context.fill();\n        context.restore();\n        context.stroke();\n      }\n    }\n    update() {}\n  }\n\n  class Egg {\n    constructor(game) {\n      this.game = game;\n      this.collisionRadius = 40;\n      this.margin = this.collisionRadius * 2;\n      this.collisionX =\n        this.margin + Math.random() * (this.game.width - this.margin * 2);\n      this.collisionY =\n        this.game.topMargin +\n        Math.random() * (this.game.height - this.game.topMargin - this.margin);\n      this.collisionRadius = 40;\n      this.image = document.getElementById('egg');\n      this.spriteWidth = 110;\n      this.spriteHeight = 135;\n      this.width = this.spriteWidth;\n      this.height = this.spriteHeight;\n      this.spriteX;\n      this.spriteY;\n      this.hatchTimer = 0;\n      this.hatchInterval = 3000;\n      this.markedForDeletion = false;\n    }\n    draw(context) {\n      context.drawImage(this.image, this.spriteX, this.spriteY);\n      if (this.game.debug) {\n        context.beginPath();\n        context.arc(\n          this.collisionX,\n          this.collisionY,\n          this.collisionRadius,\n          0,\n          Math.PI * 2\n        );\n        context.save();\n        context.globalAlpha = 0.5;\n        context.fill();\n        context.restore();\n        context.stroke();\n        this.displayTimer = (this.hatchTimer * 0.001).toFixed(0);\n        context.fillText(\n          this.displayTimer,\n          this.collisionX,\n          this.collisionY - this.collisionRadius * 2.5\n        );\n      }\n    }\n    update(deltaTime) {\n      this.spriteX = this.collisionX - this.width * 0.5;\n      this.spriteY = this.collisionY - this.height * 0.5 - 30;\n      let collisionObjects = [\n        this.game.player,\n        ...this.game.obstacles,\n        ...this.game.enemies,\n      ];\n      collisionObjects.forEach(object => {\n        let [collision, distance, sumOfRadii, dx, dy] =\n          this.game.checkCollision(this, object);\n        if (collision) {\n          const unit_x = dx / distance;\n          const unit_y = dy / distance;\n          this.collisionX = object.collisionX + (sumOfRadii + 1) * unit_x;\n          this.collisionY = object.collisionY + (sumOfRadii + 1) * unit_y;\n        }\n      });\n      if (\n        this.hatchTimer > this.hatchInterval ||\n        this.collisionY < this.game.topMargin\n      ) {\n        this.game.hatchlings.push(\n          new Larva(this.game, this.collisionX, this.collisionY)\n        );\n        this.markedForDeletion = true;\n        this.game.removeGameObjects();\n      } else {\n        this.hatchTimer += deltaTime;\n      }\n    }\n  }\n\n  class Larva {\n    constructor(game, x, y) {\n      this.game = game;\n      this.collisionX = x;\n      this.collisionY = y;\n      this.collisionRadius = 30;\n      this.image = document.getElementById('larva');\n      this.spriteWidth = 150;\n      this.spriteHeight = 150;\n      this.width = this.spriteWidth;\n      this.height = this.spriteHeight;\n      this.spriteX;\n      this.spriteY;\n      this.speedY = 1 + Math.random();\n      this.frameX = 0;\n      this.frameY = Math.floor(Math.random() * 2);\n    }\n\n    draw(context) {\n      context.drawImage(\n        this.image,\n        this.frameX * this.spriteWidth,\n        this.frameY * this.spriteHeight,\n        this.spriteWidth,\n        this.spriteHeight,\n        this.spriteX,\n        this.spriteY,\n        this.width,\n        this.height\n      );\n      if (this.game.debug) {\n        context.beginPath();\n        context.arc(\n          this.collisionX,\n          this.collisionY,\n          this.collisionRadius,\n          0,\n          Math.PI * 2\n        );\n        context.save();\n        context.globalAlpha = 0.5;\n        context.fill();\n        context.restore();\n        context.stroke();\n      }\n    }\n\n    update() {\n      this.collisionY -= this.speedY;\n      this.spriteX = this.collisionX - this.width * 0.5;\n      this.spriteY = this.collisionY - this.height * 0.5 - 50;\n      if (this.collisionY < this.game.topMargin) {\n        this.markedForDeletion = true;\n        this.game.removeGameObjects();\n        if (!this.game.gameOver) this.game.score++;\n        for (let i = 0; i < 3; i++) {\n          this.game.particles.push(\n            new Firefly(this.game, this.collisionX, this.collisionY, 'yellow')\n          );\n        }\n      }\n      let collisionObjects = [this.game.player, ...this.game.obstacles];\n      collisionObjects.forEach(object => {\n        let [collision, distance, sumOfRadii, dx, dy] =\n          this.game.checkCollision(this, object);\n        if (collision) {\n          const unit_x = dx / distance;\n          const unit_y = dy / distance;\n          this.collisionX = object.collisionX + (sumOfRadii + 1) * unit_x;\n          this.collisionY = object.collisionY + (sumOfRadii + 1) * unit_y;\n        }\n      });\n      this.game.enemies.forEach(enemy => {\n        if (this.game.checkCollision(this, enemy)[0]) {\n          this.markedForDeletion = true;\n          this.game.removeGameObjects();\n          this.game.lostHatchlings++;\n          for (let i = 0; i < 3; i++) {\n            this.game.particles.push(\n              new Spark(\n                this.game,\n                this.collisionX,\n                this.collisionY,\n                'lightgreen'\n              )\n            );\n          }\n        }\n      });\n    }\n  }\n\n  class Enemy {\n    constructor(game) {\n      this.game = game;\n      this.collisionRadius = 30;\n      this.speedX = Math.random() * 3 + 0.5;\n      this.image = document.getElementById('toads');\n      this.spriteWidth = 140;\n      this.spriteHeight = 260;\n      this.width = this.spriteWidth;\n      this.height = this.spriteHeight;\n      this.collisionX =\n        this.game.width + this.width + Math.random() * this.game.width * 0.5;\n      this.collisionY =\n        this.game.topMargin +\n        Math.random() * (this.game.height - this.game.topMargin);\n      this.spriteX;\n      this.spriteY;\n      this.frameX = 0;\n      this.frameY = Math.floor(Math.random() * 4);\n    }\n    draw(context) {\n      context.drawImage(\n        this.image,\n        this.frameX * this.spriteWidth,\n        this.frameY * this.spriteHeight,\n        this.spriteWidth,\n        this.spriteHeight,\n        this.spriteX,\n        this.spriteY,\n        this.width,\n        this.height\n      );\n      if (this.game.debug) {\n        context.beginPath();\n        context.arc(\n          this.collisionX,\n          this.collisionY,\n          this.collisionRadius,\n          0,\n          Math.PI * 2\n        );\n        context.save();\n        context.globalAlpha = 0.5;\n        context.fill();\n        context.restore();\n        context.stroke();\n      }\n    }\n    update() {\n      this.spriteX = this.collisionX - this.width * 0.5;\n      this.spriteY = this.collisionY - this.height + 40;\n      this.collisionX -= this.speedX;\n      if (this.spriteX + this.width < 0 && !this.game.gameOver) {\n        this.collisionX =\n          this.game.width + this.width + Math.random() * this.game.width * 0.5;\n        this.collisionY =\n          this.game.topMargin +\n          Math.random() * (this.game.height - this.game.topMargin);\n        this.frameY = Math.floor(Math.random() * 4);\n      }\n      let collisionObjects = [this.game.player, ...this.game.obstacles];\n      collisionObjects.forEach(object => {\n        let [collision, distance, sumOfRadii, dx, dy] =\n          this.game.checkCollision(this, object);\n        if (collision) {\n          const unit_x = dx / distance;\n          const unit_y = dy / distance;\n          this.collisionX = object.collisionX + (sumOfRadii + 1) * unit_x;\n          this.collisionY = object.collisionY + (sumOfRadii + 1) * unit_y;\n        }\n      });\n    }\n  }\n\n  class Particle {\n    constructor(game, x, y, color) {\n      this.game = game;\n      this.collisionX = x;\n      this.collisionY = y;\n      this.color = color;\n      this.radius = Math.floor(Math.random() * 10 + 5);\n      this.speedX = Math.random() * 6 - 3;\n      this.speedY = Math.random() * 2 + 0.5;\n      this.angle = 0;\n      this.va = Math.random() * 0.1 + 0.01;\n      this.markedForDeletion = false;\n    }\n    draw(context) {\n      context.save();\n      context.fillStyle = this.color;\n      context.beginPath();\n      context.arc(\n        this.collisionX,\n        this.collisionY,\n        this.radius,\n        0,\n        Math.PI * 2\n      );\n      context.fill();\n      context.stroke();\n      context.restore();\n    }\n  }\n\n  class Firefly extends Particle {\n    update() {\n      this.angle += this.va;\n      this.collisionX += Math.cos(this.angle) * this.speedX;\n      this.collisionY -= this.speedY;\n      if (this.collisionY < 0 - this.radius) {\n        this.markedForDeletion = true;\n        this.game.removeGameObjects();\n      }\n    }\n  }\n\n  class Spark extends Particle {\n    update() {\n      this.angle += this.va * 0.5;\n      this.collisionX -= Math.sin(this.angle) * this.speedX;\n      this.collisionY -= Math.cos(this.angle) * this.speedY;\n      if (this.radius > 0.1) this.radius -= 0.05;\n      if (this.radius < 0.2) {\n        this.markedForDeletion = true;\n        this.game.removeGameObjects();\n      }\n    }\n  }\n\n  class Game {\n    constructor(canvas) {\n      this.canvas = canvas;\n      this.width = this.canvas.width;\n      this.height = this.canvas.height;\n      this.topMargin = 260;\n      this.debug = true;\n      this.player = new Player(this);\n      this.fps = 70;\n      this.timer = 0;\n      this.interval = 1000 / this.fps;\n      this.eggTimer = 0;\n      this.eggInterval = 1000;\n      this.numberOfObstacles = 8;\n      this.maxEggs = 10;\n      this.obstacles = [];\n      this.eggs = [];\n      this.enemies = [];\n      this.hatchlings = [];\n      this.particles = [];\n      this.gameObjects = [];\n      this.score = 0;\n      this.winningScore = 5;\n      this.gameOver = false;\n      this.lostHatchlings = 0;\n      this.mouse = {\n        x: this.width * 0.5,\n        y: this.height * 0.5,\n        pressed: false,\n      };\n\n      canvas.addEventListener('mousedown', e => {\n        this.mouse.x = e.offsetX;\n        this.mouse.y = e.offsetY;\n        this.mouse.pressed = true;\n      });\n      canvas.addEventListener('mouseup', e => {\n        this.mouse.x = e.offsetX;\n        this.mouse.y = e.offsetY;\n        this.mouse.pressed = false;\n      });\n      canvas.addEventListener('mousemove', e => {\n        if (this.mouse.pressed) {\n          this.mouse.x = e.offsetX;\n          this.mouse.y = e.offsetY;\n        }\n      });\n      window.addEventListener('keydown', e => {\n        if (e.key == 'd') this.debug = !this.debug;\n      });\n    }\n\n    render(context, deltaTime) {\n      if (this.timer > this.interval) {\n        context.clearRect(0, 0, this.width, this.height);\n        this.gameObjects = [\n          this.player,\n          ...this.eggs,\n          ...this.obstacles,\n          ...this.enemies,\n          ...this.hatchlings,\n          ...this.particles,\n        ];\n        this.gameObjects.sort((a, b) => {\n          return a.collisionY - b.collisionY;\n        });\n        this.gameObjects.forEach(object => {\n          object.draw(context);\n          object.update(deltaTime);\n        });\n        this.timer = 0;\n      }\n      this.timer += deltaTime;\n      if (\n        this.eggTimer > this.eggInterval &&\n        this.eggs.length < this.maxEggs &&\n        !this.gameOver\n      ) {\n        this.addEgg();\n        this.eggTimer = 0;\n      } else {\n        this.eggTimer += deltaTime;\n      }\n      context.save();\n      context.textAlign = 'left';\n      context.fillText('Score : ' + this.score, 25, 85);\n      if (this.debug) {\n        context.fillText('Lost : ' + this.lostHatchlings, 25, 130);\n      }\n      context.restore();\n      if (this.score >= this.winningScore) {\n        this.gameOver = true;\n        context.save();\n        context.fillStyle = 'rgba(0,0,0,0.5)';\n        context.fillRect(0, 0, this.width, this.height);\n        context.fillStyle = 'white';\n        context.textAlign = 'center';\n        context.shadowOffsetX = 4;\n        context.shadowOffsetY = 4;\n        context.shadowColor = 'black';\n        let message1;\n        let message2;\n        if (this.lostHatchlings <= 5) {\n          message1 = 'Yo-yo You win!!!';\n          message2 = 'You are the best player!!!';\n        } else {\n          message1 = 'Sory you lose !!!';\n          message2 = 'You lost ' + this.lostHatchlings;\n        }\n        context.font = '130px Bangers';\n        context.fillText(message1, this.width * 0.5, this.height * 0.5 - 20);\n        context.font = '40px Bangers';\n        context.fillText(message2, this.width * 0.5, this.height * 0.5 + 30);\n        context.fillText(\n          'Final Score ' +\n            ' - ' +\n            this.score +\n            ' If you want to try again please press \"R\"',\n          this.width * 0.5,\n          this.height * 0.5 + 80\n        );\n        context.restore();\n      }\n    }\n\n    checkCollision(a, b) {\n      const dx = a.collisionX - b.collisionX;\n      const dy = a.collisionY - b.collisionY;\n      const distance = Math.hypot(dy, dx);\n      const sumOfRadii = a.collisionRadius + b.collisionRadius;\n      return [distance < sumOfRadii, distance, sumOfRadii, dx, dy];\n    }\n\n    addEgg() {\n      this.eggs.push(new Egg(this));\n    }\n\n    addEnemy() {\n      this.enemies.push(new Enemy(this));\n    }\n\n    removeGameObjects() {\n      this.eggs = this.eggs.filter(object => !object.markedForDeletion);\n      this.hatchlings = this.hatchlings.filter(\n        object => !object.markedForDeletion\n      );\n      this.particles = this.particles.filter(\n        object => !object.markedForDeletion\n      );\n    }\n\n    init() {\n      for (let i = 0; i < 5; i++) {\n        this.addEnemy();\n      }\n      let attempts = 0;\n      while (this.obstacles.length < this.numberOfObstacles && attempts < 500) {\n        let testObstacle = new Obstacle(this);\n        let overlap = false;\n        this.obstacles.forEach(obstacle => {\n          const dx = testObstacle.collisionX - obstacle.collisionX;\n          const dy = testObstacle.collisionY - obstacle.collisionY;\n          const distance = Math.hypot(dy, dx);\n          const distanceBuffer = 150;\n          const sumOfRadii =\n            testObstacle.collisionRadius +\n            obstacle.collisionRadius +\n            distanceBuffer;\n          if (distance < sumOfRadii) {\n            overlap = true;\n          }\n        });\n        const margin = testObstacle.collisionRadius * 3;\n        if (\n          !overlap &&\n          testObstacle.spriteX > 0 &&\n          testObstacle.spriteX < this.width - testObstacle.width &&\n          testObstacle.collisionY > this.topMargin + margin &&\n          testObstacle.collisionY < this.height - margin\n        ) {\n          this.obstacles.push(testObstacle);\n        }\n        attempts++;\n      }\n    }\n  }\n\n  const game = new Game(canvas);\n  game.init();\n  console.log(game);\n\n  let lastTime = 0;\n  function animate(timeStamp) {\n    const deltaTime = timeStamp - lastTime;\n    lastTime = timeStamp;\n    game.render(ctx, deltaTime);\n    requestAnimationFrame(animate);\n  }\n  animate(0);\n});\n"],"names":["window","addEventListener","canvas","this","document","getElementById","ctx","getContext","width","height","fillStyle","lineWidth","strokeStyle","font","textAlign","Player","draw","context","drawImage","image","frameX","spriteWidth","frameY","spriteHeight","spriteX","spriteY","game","debug","beginPath","arc","collisionX","collisionY","collisionRadius","Math","PI","save","globalAlpha","fill","restore","stroke","moveTo","lineTo","mouse","x","y","update","dx","dy","angle","atan2","distance","hypot","speedModifier","speedX","speedY","topMargin","obstacles","forEach","obstacle","collision","sumOfRadii","checkCollision","unit_x","unit_y","constructor","Obstacle","random","floor","Egg","displayTimer","hatchTimer","toFixed","fillText","deltaTime","player","enemies","object","hatchInterval","hatchlings","push","Larva","markedForDeletion","removeGameObjects","margin","gameOver","score","i","particles","Firefly","enemy","lostHatchlings","Spark","Enemy","Particle","color","radius","va","cos","sin","render","timer","interval","clearRect","gameObjects","eggs","sort","a","b","eggTimer","eggInterval","length","maxEggs","addEgg","winningScore","message1","message2","fillRect","shadowOffsetX","shadowOffsetY","shadowColor","addEnemy","filter","init","attempts","numberOfObstacles","testObstacle","overlap","fps","pressed","e","offsetX","offsetY","key","console","log","lastTime","animate","timeStamp","requestAnimationFrame"],"version":3,"file":"index.c4c83557.js.map"}