{"mappings":"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","sources":["src/index.js"],"sourcesContent":["window.addEventListener('load', function () {\n  const canvas = this.document.getElementById('canvas1');\n  const ctx = canvas.getContext('2d');\n  canvas.width = 1280;\n  canvas.height = 720;\n\n  ctx.fillStyle = 'white';\n  ctx.lineWidth = 3;\n  ctx.strokeStyle = 'white';\n  ctx.font = '40px Helvetica';\n  ctx.textAlign = 'center';\n\n  class Player {\n    constructor(game) {\n      this.game = game;\n      this.collisionX = this.game.width * 0.5;\n      this.collisionY = this.game.height * 0.5;\n      this.collisionRadius = 30;\n      this.speedX = 0;\n      this.speedY = 0;\n      this.dx = 0;\n      this.dy = 0;\n      this.speedModifier = 5;\n      this.spriteWidth = 255;\n      this.spriteHeight = 256;\n      this.width = this.spriteWidth;\n      this.height = this.spriteHeight;\n      this.spriteX;\n      this.spriteY;\n      this.frameX = 0;\n      this.frameY = 0;\n      this.image = document.getElementById('bull');\n    }\n    draw(context) {\n      context.drawImage(\n        this.image,\n        this.frameX * this.spriteWidth,\n        this.frameY * this.spriteHeight,\n        this.spriteWidth,\n        this.spriteHeight,\n        this.spriteX,\n        this.spriteY,\n        this.width,\n        this.height\n      );\n      if (this.game.debug) {\n        context.beginPath();\n        context.arc(\n          this.collisionX,\n          this.collisionY,\n          this.collisionRadius,\n          0,\n          Math.PI * 2\n        );\n        context.save();\n        context.globalAlpha = 0.5;\n        context.fill();\n        context.restore();\n        context.stroke();\n        context.beginPath();\n        context.moveTo(this.collisionX, this.collisionY);\n        context.lineTo(this.game.mouse.x, this.game.mouse.y);\n        context.stroke();\n      }\n    }\n    update() {\n      // sprite animation\n      this.dx = this.game.mouse.x - this.collisionX;\n      this.dy = this.game.mouse.y - this.collisionY;\n      const angle = Math.atan2(this.dy, this.dx);\n      if (angle < -2.74 || angle > 2.74) this.frameY = 6;\n      else if (angle < -1.96) this.frameY = 7;\n      else if (angle < -1.17) this.frameY = 0;\n      else if (angle < -0.39) this.frameY = 1;\n      else if (angle < 0.39) this.frameY = 2;\n      else if (angle < 1.17) this.frameY = 3;\n      else if (angle < 1.96) this.frameY = 4;\n      else if (angle < 2.74) this.frameY = 5;\n\n      const distance = Math.hypot(this.dy, this.dx);\n      if (distance > this.speedModifier) {\n        this.speedX = this.dx / distance || 0;\n        this.speedY = this.dy / distance || 0;\n      } else {\n        this.speedX = 0;\n        this.speedY = 0;\n      }\n      this.collisionX += this.speedX * this.speedModifier;\n      this.collisionY += this.speedY * this.speedModifier;\n      this.spriteX = this.collisionX - this.width * 0.5;\n      this.spriteY = this.collisionY - this.height * 0.5 - 100;\n      // horizontal boundaries\n      if (this.collisionX < this.collisionRadius)\n        this.collisionX = this.collisionRadius;\n      else if (this.collisionX > this.game.width - this.collisionRadius)\n        this.collisionX = this.game.width - this.collisionRadius;\n      // vertical boundaries\n      if (this.collisionY < this.game.topMargin + this.collisionRadius)\n        this.collisionY = this.game.topMargin + this.collisionRadius;\n      else if (this.collisionY > this.game.height - this.collisionRadius)\n        this.collisionY = this.game.height - this.collisionRadius;\n      // collision with obstacles\n      this.game.obstacles.forEach(obstacle => {\n        // [distance < sumOfRadii, distance, sumOfRadii, dx, dy];\n        let [collision, distance, sumOfRadii, dx, dy] =\n          this.game.checkCollision(this, obstacle);\n        if (collision) {\n          const unit_x = dx / distance;\n          const unit_y = dy / distance;\n          this.collisionX = obstacle.collisionX + (sumOfRadii + 1) * unit_x;\n          this.collisionY = obstacle.collisionY + (sumOfRadii + 1) * unit_y;\n        }\n      });\n    }\n  }\n\n  class Obstacle {\n    constructor(game) {\n      this.game = game;\n      this.collisionX = Math.random() * this.game.width;\n      this.collisionY = Math.random() * this.game.height;\n      this.collisionRadius = 40;\n      this.image = document.getElementById('obstacles');\n      this.spriteWidth = 250;\n      this.spriteHeight = 250;\n      this.width = this.spriteWidth;\n      this.height = this.spriteHeight;\n      this.spriteX = this.collisionX - this.width * 0.5;\n      this.spriteY = this.collisionY - this.height * 0.5 - 70;\n      this.frameX = Math.floor(Math.random() * 4);\n      this.frameY = Math.floor(Math.random() * 3);\n    }\n    draw(context) {\n      context.drawImage(\n        this.image,\n        this.frameX * this.spriteWidth,\n        this.frameY * this.spriteHeight,\n        this.spriteWidth,\n        this.spriteHeight,\n        this.spriteX,\n        this.spriteY,\n        this.width,\n        this.height\n      );\n      if (this.game.debug) {\n        context.beginPath();\n        context.arc(\n          this.collisionX,\n          this.collisionY,\n          this.collisionRadius,\n          0,\n          Math.PI * 2\n        );\n        context.save();\n        context.globalAlpha = 0.5;\n        context.fill();\n        context.restore();\n        context.stroke();\n      }\n    }\n    update() {}\n  }\n\n  class Egg {\n    constructor(game) {\n      this.game = game;\n      this.collisionRadius = 40;\n      this.margin = this.collisionRadius * 2;\n      this.collisionX =\n        this.margin + Math.random() * (this.game.width - this.margin * 2);\n      this.collisionY =\n        this.game.topMargin +\n        Math.random() * (this.game.height - this.game.topMargin - this.margin);\n      this.collisionRadius = 40;\n      this.image = document.getElementById('egg');\n      this.spriteWidth = 110;\n      this.spriteHeight = 135;\n      this.width = this.spriteWidth;\n      this.height = this.spriteHeight;\n      this.spriteX;\n      this.spriteY;\n      this.hatchTimer = 0;\n      this.hatchInterval = 3000;\n      this.markedForDeletion = false;\n    }\n    draw(context) {\n      context.drawImage(this.image, this.spriteX, this.spriteY);\n      if (this.game.debug) {\n        context.beginPath();\n        context.arc(\n          this.collisionX,\n          this.collisionY,\n          this.collisionRadius,\n          0,\n          Math.PI * 2\n        );\n        context.save();\n        context.globalAlpha = 0.5;\n        context.fill();\n        context.restore();\n        context.stroke();\n        this.displayTimer = (this.hatchTimer * 0.001).toFixed(0);\n        context.fillText(\n          this.displayTimer,\n          this.collisionX,\n          this.collisionY - this.collisionRadius * 2.5\n        );\n      }\n    }\n    update(deltaTime) {\n      this.spriteX = this.collisionX - this.width * 0.5;\n      this.spriteY = this.collisionY - this.height * 0.5 - 30;\n      let collisionObjects = [\n        this.game.player,\n        ...this.game.obstacles,\n        ...this.game.enemies,\n      ];\n      collisionObjects.forEach(object => {\n        let [collision, distance, sumOfRadii, dx, dy] =\n          this.game.checkCollision(this, object);\n        if (collision) {\n          const unit_x = dx / distance;\n          const unit_y = dy / distance;\n          this.collisionX = object.collisionX + (sumOfRadii + 1) * unit_x;\n          this.collisionY = object.collisionY + (sumOfRadii + 1) * unit_y;\n        }\n      });\n      if (this.hatchTimer > this.hatchInterval) {\n        this.game.hatchlings.push(\n          new Larva(this.game, this.collisionX, this.collisionY)\n        );\n        this.markedForDeletion = true;\n        this.game.removeGameObjects();\n      } else {\n        this.hatchTimer += deltaTime;\n      }\n    }\n  }\n\n  class Larva {\n    constructor(game, x, y) {\n      this.game = game;\n      this.collisionX = x;\n      this.collisionY = y;\n      this.collisionRadius = 30;\n      this.image = document.getElementById('larva');\n      this.spriteWidth = 150;\n      this.spriteHeight = 150;\n      this.width = this.spriteWidth;\n      this.height = this.spriteHeight;\n      this.spriteX;\n      this.spriteY;\n      this.speedY = 1 + Math.random();\n    }\n\n    draw(context) {\n      context.drawImage(\n        this.image,\n        0,\n        0,\n        this.spriteWidth,\n        this.spriteHeight,\n        this.spriteX,\n        this.spriteY,\n        this.width,\n        this.height\n      );\n      if (this.game.debug) {\n        context.beginPath();\n        context.arc(\n          this.collisionX,\n          this.collisionY,\n          this.collisionRadius,\n          0,\n          Math.PI * 2\n        );\n        context.save();\n        context.globalAlpha = 0.5;\n        context.fill();\n        context.restore();\n        context.stroke();\n      }\n    }\n\n    update() {\n      this.collisionY -= this.speedY;\n      this.spriteX = this.collisionX - this.width * 0.5;\n      this.spriteY = this.collisionY - this.height * 0.5 - 50;\n      if (this.collisionY < this.game.topMargin) {\n        this.markedForDeletion = true;\n        this.game.removeGameObjects();\n      }\n    }\n  }\n\n  class Enemy {\n    constructor(game) {\n      this.game = game;\n      this.collisionRadius = 30;\n      this.speedX = Math.random() * 3 + 0.5;\n      this.image = document.getElementById('toad');\n      this.spriteWidth = 140;\n      this.spriteHeight = 260;\n      this.width = this.spriteWidth;\n      this.height = this.spriteHeight;\n      this.collisionX =\n        this.game.width + this.width + Math.random() * this.game.width * 0.5;\n      this.collisionY =\n        this.game.topMargin +\n        Math.random() * (this.game.height - this.game.topMargin);\n      this.spriteX;\n      this.spriteY;\n    }\n    draw(context) {\n      context.drawImage(this.image, this.spriteX, this.spriteY);\n      if (this.game.debug) {\n        context.beginPath();\n        context.arc(\n          this.collisionX,\n          this.collisionY,\n          this.collisionRadius,\n          0,\n          Math.PI * 2\n        );\n        context.save();\n        context.globalAlpha = 0.5;\n        context.fill();\n        context.restore();\n        context.stroke();\n      }\n    }\n    update() {\n      this.spriteX = this.collisionX - this.width * 0.5;\n      this.spriteY = this.collisionY - this.height + 40;\n      this.collisionX -= this.speedX;\n      if (this.spriteX + this.width < 0) {\n        this.collisionX =\n          this.game.width + this.width + Math.random() * this.game.width * 0.5;\n        this.collisionY =\n          this.game.topMargin +\n          Math.random() * (this.game.height - this.game.topMargin);\n      }\n      let collisionObjects = [this.game.player, ...this.game.obstacles];\n      collisionObjects.forEach(object => {\n        let [collision, distance, sumOfRadii, dx, dy] =\n          this.game.checkCollision(this, object);\n        if (collision) {\n          const unit_x = dx / distance;\n          const unit_y = dy / distance;\n          this.collisionX = object.collisionX + (sumOfRadii + 1) * unit_x;\n          this.collisionY = object.collisionY + (sumOfRadii + 1) * unit_y;\n        }\n      });\n    }\n  }\n\n  class Game {\n    constructor(canvas) {\n      this.canvas = canvas;\n      this.width = this.canvas.width;\n      this.height = this.canvas.height;\n      this.topMargin = 260;\n      this.debug = true;\n      this.player = new Player(this);\n      this.fps = 70;\n      this.timer = 0;\n      this.interval = 1000 / this.fps;\n      this.eggTimer = 0;\n      this.eggInterval = 1000;\n      this.numberOfObstacles = 8;\n      this.maxEggs = 10;\n      this.obstacles = [];\n      this.eggs = [];\n      this.enemies = [];\n      this.hatchlings = [];\n      this.gameObjects = [];\n      this.mouse = {\n        x: this.width * 0.5,\n        y: this.height * 0.5,\n        pressed: false,\n      };\n\n      canvas.addEventListener('mousedown', e => {\n        this.mouse.x = e.offsetX;\n        this.mouse.y = e.offsetY;\n        this.mouse.pressed = true;\n      });\n      canvas.addEventListener('mouseup', e => {\n        this.mouse.x = e.offsetX;\n        this.mouse.y = e.offsetY;\n        this.mouse.pressed = false;\n      });\n      canvas.addEventListener('mousemove', e => {\n        if (this.mouse.pressed) {\n          this.mouse.x = e.offsetX;\n          this.mouse.y = e.offsetY;\n        }\n      });\n      window.addEventListener('keydown', e => {\n        if (e.key == 'd') this.debug = !this.debug;\n      });\n    }\n\n    render(context, deltaTime) {\n      if (this.timer > this.interval) {\n        context.clearRect(0, 0, this.width, this.height);\n        this.gameObjects = [\n          this.player,\n          ...this.eggs,\n          ...this.obstacles,\n          ...this.enemies,\n          ...this.hatchlings,\n        ];\n        this.gameObjects.sort((a, b) => {\n          return a.collisionY - b.collisionY;\n        });\n        this.gameObjects.forEach(object => {\n          object.draw(context);\n          object.update(deltaTime);\n        });\n        this.timer = 0;\n      }\n      this.timer += deltaTime;\n      if (this.eggTimer > this.eggInterval && this.eggs.length < this.maxEggs) {\n        this.addEgg();\n        this.eggTimer = 0;\n      } else {\n        this.eggTimer += deltaTime;\n      }\n    }\n\n    checkCollision(a, b) {\n      const dx = a.collisionX - b.collisionX;\n      const dy = a.collisionY - b.collisionY;\n      const distance = Math.hypot(dy, dx);\n      const sumOfRadii = a.collisionRadius + b.collisionRadius;\n      return [distance < sumOfRadii, distance, sumOfRadii, dx, dy];\n    }\n\n    addEgg() {\n      this.eggs.push(new Egg(this));\n    }\n\n    addEnemy() {\n      this.enemies.push(new Enemy(this));\n    }\n\n    removeGameObjects() {\n      this.eggs = this.eggs.filter(object => !object.markedForDeletion);\n      this.hatchlings = this.hatchlings.filter(\n        object => !object.markedForDeletion\n      );\n    }\n\n    init() {\n      for (let i = 0; i < 3; i++) {\n        this.addEnemy();\n      }\n      let attempts = 0;\n      while (this.obstacles.length < this.numberOfObstacles && attempts < 500) {\n        let testObstacle = new Obstacle(this);\n        let overlap = false;\n        this.obstacles.forEach(obstacle => {\n          const dx = testObstacle.collisionX - obstacle.collisionX;\n          const dy = testObstacle.collisionY - obstacle.collisionY;\n          const distance = Math.hypot(dy, dx);\n          const distanceBuffer = 150;\n          const sumOfRadii =\n            testObstacle.collisionRadius +\n            obstacle.collisionRadius +\n            distanceBuffer;\n          if (distance < sumOfRadii) {\n            overlap = true;\n          }\n        });\n        const margin = testObstacle.collisionRadius * 3;\n        if (\n          !overlap &&\n          testObstacle.spriteX > 0 &&\n          testObstacle.spriteX < this.width - testObstacle.width &&\n          testObstacle.collisionY > this.topMargin + margin &&\n          testObstacle.collisionY < this.height - margin\n        ) {\n          this.obstacles.push(testObstacle);\n        }\n        attempts++;\n      }\n    }\n  }\n\n  const game = new Game(canvas);\n  game.init();\n  console.log(game);\n\n  let lastTime = 0;\n  function animate(timeStamp) {\n    const deltaTime = timeStamp - lastTime;\n    lastTime = timeStamp;\n    game.render(ctx, deltaTime);\n    requestAnimationFrame(animate);\n  }\n  animate(0);\n});\n"],"names":["window","addEventListener","canvas","this","document","getElementById","ctx","getContext","width","height","fillStyle","lineWidth","strokeStyle","font","textAlign","Player","draw","context","drawImage","image","frameX","spriteWidth","frameY","spriteHeight","spriteX","spriteY","game","debug","beginPath","arc","collisionX","collisionY","collisionRadius","Math","PI","save","globalAlpha","fill","restore","stroke","moveTo","lineTo","mouse","x","y","update","dx","dy","angle","atan2","distance","hypot","speedModifier","speedX","speedY","topMargin","obstacles","forEach","obstacle","collision","sumOfRadii","checkCollision","unit_x","unit_y","constructor","Obstacle","random","floor","Egg","displayTimer","hatchTimer","toFixed","fillText","deltaTime","player","enemies","object","hatchInterval","hatchlings","push","Larva","markedForDeletion","removeGameObjects","margin","Enemy","render","timer","interval","clearRect","gameObjects","eggs","sort","a","b","eggTimer","eggInterval","length","maxEggs","addEgg","addEnemy","filter","init","i","attempts","numberOfObstacles","testObstacle","overlap","fps","pressed","e","offsetX","offsetY","key","console","log","lastTime","animate","timeStamp","requestAnimationFrame"],"version":3,"file":"index.ea580904.js.map"}